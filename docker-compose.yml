version: '3.9'
name: opa
services:
  zookeeper:
    image: wurstmeister/zookeeper
    networks:
      - opa_network
    ports:
      - "2181:2181"
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    restart: unless-stopped

  kafka:
    image: wurstmeister/kafka
    networks:
      - opa_network
    depends_on:
      - zookeeper
    ports:
      - "9092-9094:9092"
    healthcheck:
      test: ["CMD", "./opt/kafka/bin/kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 5s
      timeout: 5s
      retries: 40
    environment:
      DOCKER_API_VERSION: 1.44
      HOSTNAME_COMMAND: "route -n | awk '/UG[ \t]/{print $$2}'"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "BTCUSDT:2:3,ETHUSDT:2:3"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  kafkaui:
    image: provectuslabs/kafka-ui
    networks:
      - opa_network
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_started
    ports:
      - "1234:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"

  hbase:
    image: opa_hbase:latest
    build:
      context: .
      dockerfile: docker/hbase/Dockerfile
    networks:
      - opa_network
    volumes:
      - /data:/data
    ports:
      - "9090:9090"
      - "16000:16000"
      - "16010:16010"
      - "16020:16020"
      - "16030:16030"
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "9090"]
      interval: 5s
      timeout: 5s
      retries: 40

  jupyter:
    image: jupyter/datascience-notebook:latest
    networks:
      - opa_network
    depends_on:
      - hbase
      - kafka
    volumes:
      - ./notebook:/home/jovyan/work
    ports:
      - "8888:8888"

  collect_hd:
    image: opa_collect_historic_data:latest
    build:
      context: .
      dockerfile: docker/collect_historic_data/Dockerfile
    command: -s BTCUSDT ETHUSDT -i 1m 15m 30m
    networks:
      - opa_network
    depends_on:
      hbase:
        condition: service_healthy
    restart: on-failure

  collect_sd:
    image: opa_collect_stream_data:latest
    build:
      context: .
      dockerfile: docker/collect_stream_data/Dockerfile
      args:
        - API_KEY
        - API_SECRET
    command: -s BTCUSDT ETHUSDT -i 1m 15m 30m
    networks:
      - opa_network
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure

  streaming:
    image: opa_streaming:latest
    build:
      context: .
      dockerfile: docker/streaming/Dockerfile
    command: -t BTCUSDT ETHUSDT
    networks:
      - opa_network
    depends_on:
      hbase:
        condition: service_healthy
      kafka:
        condition: service_healthy
      collect_hd:
        condition: service_started
    restart: on-failure

  api:
    image: opa_api:latest
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    environment:
      DATABASE_HOST: 'hbase'
      DATABASE_PORT: 9090
    ports:
      - "8000:8000"
    networks:
      - opa_network
    depends_on:
      hbase:
        condition: service_healthy
    restart: on-failure

  dashboard:
    image: opa_dashboard:latest
    build:
      context: .
      dockerfile: docker/dashboard/Dockerfile
    environment:
      OPA_API_URL: 'api:8000'
    ports:
      - "5000:5000"
    networks:
      - opa_network
    depends_on:
      api:
        condition: service_started
    restart: on-failure

networks:
  opa_network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16
          gateway: 10.5.0.1
