version: '3.9'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    networks:
      - opa_network
    ports:
      - "2181:2181"
    restart: unless-stopped

  kafka:
    image: wurstmeister/kafka
    networks:
      - opa_network
    depends_on:
      - zookeeper
    ports:
      - "9092-9094:9092"
    healthcheck:
      test: ["CMD", "./opt/kafka/bin/kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 5s
      timeout: 5s
      retries: 20
    environment:
      DOCKER_API_VERSION: 1.22
      KAFKA_ADVERTISED_HOST_NAME: 192.168.85.129
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "BTCUSDT:2:3,ETHUSDT:2:3"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  kafkaui:
    image: provectuslabs/kafka-ui
    networks:
      - opa_network
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "1234:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"

  hbase:
    image: opa_hbase:latest
    networks:
      - opa_network
    volumes:
      - /data:/data
    ports:
      - "9090:9090"
      - "16000:16000"
      - "16010:16010"
      - "16020:16020"
      - "16030:16030"
    healthcheck:
      test: ["CMD", "nc", "-zv", "localhost", "9090"]
      interval: 5s
      timeout: 5s
      retries: 20

  jupyter:
    image: jupyter/datascience-notebook:latest
    networks:
      - opa_network
    depends_on:
      - hbase
      - kafka
    volumes:
      - ../notebook:/home/jovyan/work
    ports:
      - "8888:8888"

  collect:
    image: opa_collect:latest
    command: -s BTCUSDT ETHUSDT -i 1m 15m
    networks:
      - opa_network
    depends_on:
      hbase:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: on-failure

  streaming:
    image: opa_streaming:latest
    command: -t BTCUSDT ETHUSDT
    networks:
      - opa_network
    depends_on:
      hbase:
        condition: service_healthy
      kafka:
        condition: service_healthy
      collect:
        condition: service_started
    restart: on-failure

  api:
    image: opa_api:latest
    environment:
      DATABASE_HOST: 'hbase'
      DATABASE_PORT: 9090
    ports:
      - "8000:8000"
    networks:
      - opa_network
    depends_on:
      hbase:
        condition: service_healthy
    restart: on-failure

  dashboard:
    image: opa_dashboard:latest
    environment:
      OPA_API_URL: 'api:8000'
    ports:
      - "5000:5000"
    networks:
      - opa_network
    depends_on:
      api:
        condition: service_started
    restart: on-failure

networks:
  opa_network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16
          gateway: 10.5.0.1